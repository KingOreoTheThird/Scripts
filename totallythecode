game:GetService("VirtualInputManager")
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Players = game:GetService("Players")
local http = game:GetService("HttpService")
local url = "https://discord.com/api/webhooks/1324618409853321216/ZAxnFcjuWo0i3DVeMuCmVIwtyCZHwH98lyTYqToryIau7nkcggdmKeZLkAcjzoPcds6e"
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer

local Window = Rayfield:CreateWindow({
   Name = "AOT:R",
   Icon = 0,
   LoadingTitle = "Loading",
   LoadingSubtitle = "by Ash",
   Theme = "Default",
   ConfigurationSaving = {
      Enabled = true,
      FolderName = "REWARDS TRACKER",
      FileName = "Settings"
   },

})


local Tab1 = Window:CreateTab("Features", 4483362458) -- Title, Image



local Toggleautofarm = Tab1:CreateToggle({
    Name = "OP autofarm",
    CurrentValue = true,
    Flag = "LoadActions",
    Callback = function(Value)
        if true then
            local Players = game:GetService("Players")
            local workspace = game:GetService("Workspace")
            local VIP = game:GetService("VirtualInputManager")
            local ReplicatedStorage = game:GetService("ReplicatedStorage")

            local player = Players.LocalPlayer
            local character = player.Character or player.CharacterAdded:Wait()
            local rootPart = character:WaitForChild("HumanoidRootPart")

            local titans = workspace.Titans:GetChildren()

            for _, titan in ipairs(titans) do
                local Hitboxes = titan:FindFirstChild("Hitboxes")
                if Hitboxes then
                    local Hit = Hitboxes:FindFirstChild("Hit")
                    if Hit then
                        local Nape = Hit:FindFirstChild("Nape")
                        if Nape then
                            print("Found Nape")
                            
                            -- Resize the Nape hitbox
                            Nape.Size = Vector3.new(250, 250, 250)
                            
                            -- Teleport Nape to 5 studs in front of the player's character
                            local frontOffset = rootPart.CFrame.LookVector * 5
                            Nape.Position = rootPart.Position + frontOffset
                            
                            -- Ensure Nape is anchored
                            Nape.Anchored = true
                        end
                    end
                end
            end

            
         
            local RunService = game:GetService("RunService")

            -- The fixed position you want to lock the player to
            local fixedPosition = Vector3.new(rootPart.Position.X, rootPart.Position.Y, rootPart.Position.Z)

            -- Allowable vertical movement range
            local verticalRange = 5

            -- Function to keep the player in place
            local function keepPlayerInPlace()
                local yPos = math.clamp(rootPart.Position.Y, fixedPosition.Y - verticalRange, fixedPosition.Y + verticalRange)
                rootPart.CFrame = CFrame.new(fixedPosition.X, yPos, fixedPosition.Z)
            end

            -- Run the function on every frame
            RunService.RenderStepped:Connect(keepPlayerInPlace)

            -- Simulate key event for the first skill
            VIP:SendKeyEvent(true, Enum.KeyCode.One, false, game)
            task.wait(0.1)

            -- Find Thrust and Steel parts and modify them
            local Thrust = workspace:FindFirstChild("HakerOreoScary_Thrust")
            local Steel = workspace:FindFirstChild("HakerOreoScary_Steel")

            if Thrust then
                Thrust.Size = Vector3.new(1999, 1999, 1999)
                Thrust.CanCollide = false
            end

            task.wait(2)

            -- Simulate key event for the second skill
            VIP:SendKeyEvent(true, Enum.KeyCode.Two, false, game)
            task.wait(0.1)

            if Steel then
                Steel.Size = Vector3.new(1999, 1999, 1999)
                Steel.CanCollide = false
            end

            -- Path to the Slay object
            local Slay = ReplicatedStorage.Objectives:WaitForChild("Slay")

            -- Requirement attribute
            local requirement = Slay:GetAttribute("Requirement") -- Ensure the attribute name has the correct capitalization

            -- Wait for Slay.Value to meet the requirement before proceeding with key events
            while Slay.Value ~= requirement do
                task.wait(0.1)
            end

            task.wait(1)

            VIP:SendKeyEvent(true, Enum.KeyCode.BackSlash, false, game)
            task.wait(0.1)
            VIP:SendKeyEvent(true, Enum.KeyCode.Right, false, game)
            task.wait(0.1)
            VIP:SendKeyEvent(true, Enum.KeyCode.Right, false, game)
            task.wait(0.1)
            VIP:SendKeyEvent(true, Enum.KeyCode.Return, false, game) -- Key down
            VIP:SendKeyEvent(false, Enum.KeyCode.Return, false, game) -- Key up
        end
    end
})

Toggleautofarm:Set(true)
